{"version":3,"sources":["../../src/module/mong.js"],"names":["Db","connect","db","client","MongoClient","url","useUnifiedTopology","datebaseName","console","log","collectionName","json","sortDoc","pageNum","pageSize","getDbInstance","call","result","collection","find","sort","skip","limit","toArray","findOne","count","doc","insertOne","docs","insertMany","oldDoc","newDoc","update","$set","instance","getInstance"],"mappings":"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","sourcesContent":["import {\r\n    MongoClient\r\n} from \"mongodb\";\r\nimport {\r\n    url,\r\n    datebaseName\r\n} from \"./config\";\r\n\r\nclass Db {\r\n    db = null\r\n    constructor() {\r\n        this.connect()\r\n    }\r\n    async connect() {\r\n        try {\r\n            if (!this.db) {\r\n                const client = new MongoClient(url, {\r\n                    useUnifiedTopology: true\r\n                })\r\n                await client.connect()\r\n                this.db = client.db(datebaseName)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    async find(collectionName, json = {}, sortDoc = {}, pageNum = 1, pageSize = 10) {\r\n        await Db.getDbInstance.call(this)\r\n        const result = this.db.collection(collectionName).find(json).sort(sortDoc).skip((pageNum - 1) * 10).limit(pageSize)\r\n        return result.toArray()\r\n    }\r\n    async findOne(collectionName, json = {}) {\r\n        await Db.getDbInstance.call(this)\r\n        const result = this.db.collection(collectionName).findOne(json)\r\n        return result\r\n    }\r\n    async getCount(collectionName, json = {}) {\r\n        await Db.getDbInstance.call(this)\r\n        const result = this.db.collection(collectionName).find(json).count()\r\n        return result\r\n    }\r\n    async insertOne(collectionName, doc = {}) {\r\n        try {\r\n            await Db.getDbInstance.call(this)\r\n            return await this.db.collection(collectionName).insertOne(doc)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    async insertMany(collectionName, docs = []) {\r\n        try {\r\n            await Db.getDbInstance.call(this)\r\n            return await this.db.collection(collectionName).insertMany(docs)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    async update(collectionName, oldDoc = {}, newDoc = {}) {\r\n        try {\r\n            await Db.getDbInstance.call(this)\r\n            return await this.db.collection(collectionName).update(oldDoc, {\r\n                $set: newDoc\r\n            })\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n    static async getDbInstance() {\r\n        if (!this.db) {\r\n            await this.connect()\r\n        }\r\n    }\r\n    static getInstance() {\r\n        if (!Db.instance) {\r\n            Db.instance = new Db()\r\n        }\r\n        return Db.instance\r\n    }\r\n}\r\nconst db = Db.getInstance()\r\nexport default db\r\n\r\n// const db = Db.getInstance();\r\n// console.time(\"start1\")\r\n// db.find(\"person\").then(data => {\r\n//     console.timeEnd(\"start1\")\r\n//     console.log(data)\r\n// });\r\n// setTimeout(() => {\r\n//     const db2 = Db.getInstance();\r\n//     console.time(\"start2\")\r\n//     db2.find(\"person\").then(data => {\r\n//         console.timeEnd(\"start2\")\r\n//         console.log(data)\r\n//     });\r\n// }, 10000)"],"file":"mong.js"}