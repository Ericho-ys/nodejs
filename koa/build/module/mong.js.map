{"version":3,"sources":["../../src/module/mong.js"],"names":["Db","connect","db","client","MongoClient","url","useUnifiedTopology","datebaseName","console","log","collectionName","json","getDbInstance","call","result","collection","find","toArray","findOne","doc","insertOne","docs","insertMany","instance","getInstance"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AAGA;;IAKMA,E;AAEF,gBAAc;AAAA;AAAA,iDADT,IACS;AACV,SAAKC,OAAL;AACH;;;;;;;;;;;;;oBAGY,KAAKC,E;;;;;AACAC,gBAAAA,M,GAAS,IAAIC,oBAAJ,CAAgBC,WAAhB,EAAqB;AAChCC,kBAAAA,kBAAkB,EAAE;AADY,iBAArB,C;;uBAGTH,MAAM,CAACF,OAAP,E;;;AACN,qBAAKC,EAAL,GAAUC,MAAM,CAACD,EAAP,CAAUK,oBAAV,CAAV;;;;;;;;;AAGJC,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;kHAGGC,c;;;;;;;;AAAgBC,gBAAAA,I,8DAAO,E;;uBACxBX,EAAE,CAACY,aAAH,CAAiBC,IAAjB,CAAsB,IAAtB,C;;;AACAC,gBAAAA,M,GAAS,KAAKZ,EAAL,CAAQa,UAAR,CAAmBL,cAAnB,EAAmCM,IAAnC,CAAwCL,IAAxC,C;kDACRG,MAAM,CAACG,OAAP,E;;;;;;;;;;;;;;;;;;;qHAEGP,c;;;;;;;;AAAgBC,gBAAAA,I,8DAAO,E;;uBAC3BX,EAAE,CAACY,aAAH,CAAiBC,IAAjB,CAAsB,IAAtB,C;;;AACAC,gBAAAA,M,GAAS,KAAKZ,EAAL,CAAQa,UAAR,CAAmBL,cAAnB,EAAmCQ,OAAnC,CAA2CP,IAA3C,C;kDACRG,M;;;;;;;;;;;;;;;;;;;uHAEKJ,c;;;;;;;AAAgBS,gBAAAA,G,8DAAM,E;;;uBAExBnB,EAAE,CAACY,aAAH,CAAiBC,IAAjB,CAAsB,IAAtB,C;;;;uBACO,KAAKX,EAAL,CAAQa,UAAR,CAAmBL,cAAnB,EAAmCU,SAAnC,CAA6CD,GAA7C,C;;;;;;;;AAEbX,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;;wHAGSC,c;;;;;;;AAAgBW,gBAAAA,I,8DAAO,E;;;uBAE1BrB,EAAE,CAACY,aAAH,CAAiBC,IAAjB,CAAsB,IAAtB,C;;;;uBACO,KAAKX,EAAL,CAAQa,UAAR,CAAmBL,cAAnB,EAAmCY,UAAnC,CAA8CD,IAA9C,C;;;;;;;;AAEbb,gBAAAA,OAAO,CAACC,GAAR;;;;;;;;;;;;;;;;;;6BAGC,CAAE;;;;;;;;;oBAEF,KAAKP,E;;;;;;uBACA,KAAKD,OAAL,E;;;;;;;;;;;;;;;;;;kCAGO;AACjB,UAAI,CAACD,EAAE,CAACuB,QAAR,EAAkB;AACdvB,QAAAA,EAAE,CAACuB,QAAH,GAAc,IAAIvB,EAAJ,EAAd;AACH;;AACD,aAAOA,EAAE,CAACuB,QAAV;AACH;;;;;AAEL,IAAMrB,EAAE,GAAGF,EAAE,CAACwB,WAAH,EAAX;eACetB,E,EAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {\r\n    MongoClient\r\n} from \"mongodb\";\r\nimport {\r\n    url,\r\n    datebaseName\r\n} from \"./config\";\r\n\r\nclass Db {\r\n    db = null\r\n    constructor() {\r\n        this.connect()\r\n    }\r\n    async connect() {\r\n        try {\r\n            if (!this.db) {\r\n                const client = new MongoClient(url, {\r\n                    useUnifiedTopology: true\r\n                })\r\n                await client.connect()\r\n                this.db = client.db(datebaseName)\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    async find(collectionName, json = {}) {\r\n        await Db.getDbInstance.call(this)\r\n        const result = this.db.collection(collectionName).find(json)\r\n        return result.toArray()\r\n    }\r\n    async findOne(collectionName, json = {}) {\r\n        await Db.getDbInstance.call(this)\r\n        const result = this.db.collection(collectionName).findOne(json)\r\n        return result\r\n    }\r\n    async insertOne(collectionName, doc = {}) {\r\n        try {\r\n            await Db.getDbInstance.call(this)\r\n            return await this.db.collection(collectionName).insertOne(doc)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    async insertMany(collectionName, docs = []) {\r\n        try {\r\n            await Db.getDbInstance.call(this)\r\n            return await this.db.collection(collectionName).insertMany(docs)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n    update() {}\r\n    static async getDbInstance() {\r\n        if (!this.db) {\r\n            await this.connect()\r\n        }\r\n    }\r\n    static getInstance() {\r\n        if (!Db.instance) {\r\n            Db.instance = new Db()\r\n        }\r\n        return Db.instance\r\n    }\r\n}\r\nconst db = Db.getInstance()\r\nexport default db\r\n\r\n// const db = Db.getInstance();\r\n// console.time(\"start1\")\r\n// db.find(\"person\").then(data => {\r\n//     console.timeEnd(\"start1\")\r\n//     console.log(data)\r\n// });\r\n// setTimeout(() => {\r\n//     const db2 = Db.getInstance();\r\n//     console.time(\"start2\")\r\n//     db2.find(\"person\").then(data => {\r\n//         console.timeEnd(\"start2\")\r\n//         console.log(data)\r\n//     });\r\n// }, 10000)"],"file":"mong.js"}